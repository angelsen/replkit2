================================================================================

                               ReplKit2 - README                                

                             Rendered with TextKit                              

================================================================================

+-- H1 ------------------------------------------------------------------------+
| REPLKIT2 EXAMPLES                                                            |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

Flask-style REPL applications with rich ASCII output and MCP integration.

+-- H2 ------------------------------------------------------------------------+
| Quick Start                                                                  |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| # Install                                                                    |
| uv add replkit2                                                              |
|                                                                              |
| # Run examples                                                               |
| uv run python examples/todo.py                                               |
| uv run python examples/monitor.py                                            |
| uv run python examples/notes_mcp.py                                          |
|                                                                              |
| # Run with MCP                                                               |
| uv run python examples/notes_mcp.py --mcp                                    |
+------------------------------------------------------------------------------+

+-- H2 ------------------------------------------------------------------------+
| Core Examples                                                                |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- H3 ------------------------------------------------------------------------+
| todo.py - Todo List Manager                                                  |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

Full-featured task management with multiple views:

* Table view for task lists
* Tree view for categorization
* Progress bars for completion tracking
* Custom multi-section reports
* State persistence between commands

Key patterns: state management, display types, custom display handlers

+-- H3 ------------------------------------------------------------------------+
| monitor.py - System Monitor                                                  |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

Real-time system monitoring dashboard:

* CPU/Memory/Disk usage with progress bars
* Network stats in tables
* Process list with sorting
* Bar charts for resource visualization

Key patterns: external data integration, real-time updates, charts

+-- H3 ------------------------------------------------------------------------+
| notes_mcp.py - FastMCP Integration Demo                                      |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

Note-taking app exposing MCP tools, resources, and prompts:

* Tools: `add_note`, `list_notes`
* Resources: `note_summary`, `get_note/{id}`
* Prompts: `brainstorm_prompt`
* Dual-mode: REPL or MCP server

Key patterns: FastMCP configuration, URI templates, typed configs

+-- H3 ------------------------------------------------------------------------+
| todo_api.py - REST API Integration                                           |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

Same todo app exposed as FastAPI:

* Shared state between REPL and API
* JSON serialization for API responses
* Swagger UI at `/docs`
* Demonstrates `app.using(JSONSerializer())`

Run: [uv run --extra api uvicorn examples.todo_api:app]

+-- H2 ------------------------------------------------------------------------+
| Command Patterns                                                             |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- H3 ------------------------------------------------------------------------+
| Basic Command                                                                |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| @app.command()                                                               |
| def hello(state, name: str = "World"):                                       |
|     return f"Hello, {name}!"                                                 |
+------------------------------------------------------------------------------+

+-- H3 ------------------------------------------------------------------------+
| Table Display                                                                |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| @app.command(display="table", headers=["ID", "Task", "Done"])                |
| def list_tasks(state):                                                       |
|     return [{"ID": t.id, "Task": t.text, "Done": "✓" if t.done else "✗"}     |
|             for t in state.tasks]                                            |
+------------------------------------------------------------------------------+

+-- H3 ------------------------------------------------------------------------+
| FastMCP Tool                                                                 |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| @app.command(fastmcp={"type": "tool", "tags": {"productivity"}})             |
| def add_task(state, text: str):                                              |
|     task = state.add_task(text)                                              |
|     return f"Added task #{task.id}"                                          |
+------------------------------------------------------------------------------+

+-- H3 ------------------------------------------------------------------------+
| FastMCP Resource                                                             |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| @app.command(fastmcp={"type": "resource", "mime_type": "application/json"})  |
| def task_stats(state):                                                       |
|     # Auto-generates URI: app://task_stats                                   |
| return {"total": len(state.tasks), "done": sum(1 for t in state.tasks if     |
| t.done)}                                                                     |
+------------------------------------------------------------------------------+

+-- H2 ------------------------------------------------------------------------+
| Running Modes                                                                |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- H3 ------------------------------------------------------------------------+
| REPL Mode (Default)                                                          |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| app.run(title="My Application")                                              |
+------------------------------------------------------------------------------+

* Interactive command prompt
* Auto-generated help()
* Pretty-printed output

+-- H3 ------------------------------------------------------------------------+
| MCP Server Mode                                                              |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| if "--mcp" in sys.argv:                                                      |
|     app.mcp.run()                                                            |
+------------------------------------------------------------------------------+

* Exposes tools/resources/prompts via MCP
* Compatible with Claude Desktop, Continue, etc.
* Stateful between calls

+-- H3 ------------------------------------------------------------------------+
| API Mode                                                                     |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

+-- CODE ----------------------------------------------------------------------+
| json_api = app.using(JSONSerializer())                                       |
| # Use with FastAPI/Flask/etc                                                 |
+------------------------------------------------------------------------------+

* Same commands, JSON output
* RESTful endpoints
* Shared state with REPL

+-- H2 ------------------------------------------------------------------------+
| Display Types                                                                |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

Type         Input Data       Output                          
-----------  ---------------  --------------------------------
`table`      List of dicts    Formatted table with headers    
`box`        Any              Bordered box with optional title
`tree`       Nested dict      Hierarchical tree view          
`list`       List             Bullet list                     
`bar_chart`  Dict of numbers  Horizontal bar chart            
`progress`   {value, total}   Progress bar                    

+-- H2 ------------------------------------------------------------------------+
| FastMCP Types                                                                |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

Config                  Purpose            Example URI          
----------------------  -----------------  ---------------------
`{"type": "tool"}`      Actions/commands   N/A                  
`{"type": "resource"}`  Readable data      `app://get_item/{id}`
`{"type": "prompt"}`    Prompt templates   N/A                  
`{"enabled": False}`    REPL-only command  N/A                  

+-- H2 ------------------------------------------------------------------------+
| Tips                                                                         |
+------------------------------------------------------------------------------+
--------------------------------------------------------------------------------

1. **State First**: Every command receives state as first parameter
2. **Return Data**: Commands return data, not formatted strings
3. **Display Hints**: Match return type to display type
4. **MCP URIs**: Auto-generated from function name and parameters
5. **Type Safety**: Use `FastMCPTool`, `FastMCPResource` for IDE support

================================================================================

                       Generated from examples/README.md                        

================================================================================
